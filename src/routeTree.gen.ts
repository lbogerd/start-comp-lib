/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ParticlesImport } from './routes/particles_'
import { Route as AppImport } from './routes/_app'
import { Route as AppLibsLibNameCompTypeCompNameImport } from './routes/_app.libs.$libName.$compType.$compName'

// Create/Update Routes

const ParticlesRoute = ParticlesImport.update({
  id: '/particles_',
  path: '/particles',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppLibsLibNameCompTypeCompNameRoute =
  AppLibsLibNameCompTypeCompNameImport.update({
    id: '/libs/$libName/$compType/$compName',
    path: '/libs/$libName/$compType/$compName',
    getParentRoute: () => AppRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/particles_': {
      id: '/particles_'
      path: '/particles'
      fullPath: '/particles'
      preLoaderRoute: typeof ParticlesImport
      parentRoute: typeof rootRoute
    }
    '/_app/libs/$libName/$compType/$compName': {
      id: '/_app/libs/$libName/$compType/$compName'
      path: '/libs/$libName/$compType/$compName'
      fullPath: '/libs/$libName/$compType/$compName'
      preLoaderRoute: typeof AppLibsLibNameCompTypeCompNameImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppLibsLibNameCompTypeCompNameRoute: typeof AppLibsLibNameCompTypeCompNameRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppLibsLibNameCompTypeCompNameRoute: AppLibsLibNameCompTypeCompNameRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AppRouteWithChildren
  '/particles': typeof ParticlesRoute
  '/libs/$libName/$compType/$compName': typeof AppLibsLibNameCompTypeCompNameRoute
}

export interface FileRoutesByTo {
  '': typeof AppRouteWithChildren
  '/particles': typeof ParticlesRoute
  '/libs/$libName/$compType/$compName': typeof AppLibsLibNameCompTypeCompNameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/particles_': typeof ParticlesRoute
  '/_app/libs/$libName/$compType/$compName': typeof AppLibsLibNameCompTypeCompNameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/particles' | '/libs/$libName/$compType/$compName'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/particles' | '/libs/$libName/$compType/$compName'
  id:
    | '__root__'
    | '/_app'
    | '/particles_'
    | '/_app/libs/$libName/$compType/$compName'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  ParticlesRoute: typeof ParticlesRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  ParticlesRoute: ParticlesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/particles_"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/libs/$libName/$compType/$compName"
      ]
    },
    "/particles_": {
      "filePath": "particles_.tsx"
    },
    "/_app/libs/$libName/$compType/$compName": {
      "filePath": "_app.libs.$libName.$compType.$compName.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
